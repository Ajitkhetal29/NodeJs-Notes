Mode Js Notes

node js - A runtime environment for executing js code.
	- helps to execute the js outside the browser
	- v8 engine converts the js code to native machine code.

Features-
- asynchronus and event driven - it handles multiple requests without blocking the program. 
- Fast execution - uses v8 engine for fast execution
- no buffering - sents data in chunks instaed of loading the entire file at a single time.
- cross platform - works on linux , windows , mac OS.


Not Available -
- Window object
- Dom Manipulation
- Bom 

Runtime Environment - provides everything that need to run a program.
		   - manages the code execution  , memry interaction and hardware.

Framework - Gives structure and tools to buold applicatios faster.

Express Js - it si a web framework for node js .
	  - helps to handle the api , create server and handle rerq and response.

client side - 1. runs on the web broswer 
		2. languages user are - HTML CSS and JS
		3. Handles the user interface , interaction of user  and client side logic.
 server side -1. runs on the server 
		2. languages user is js
		3. handles business logic, data storage ,authentication , autherisation etc.

single threaded programming - 
	- program has obnly one thread to handle all the task.
	- only one task can be handle at a time.
	- blocking type of code.

synchronus programming - 
	- synchronus programming means task are done one after the another.
	- the next task will wait for the exeution of current task.	

Multi-threaded programming -
	- Multi-threaded programming means the program can run multiple tasks at the same time using multiple threads.

Asynchronous programming - 
	- asynchronus programming means task can initialize and move on without waiting for the previous task to finish.

The main difference is in how tasks are handled:
Synchronous programming: Tasks are executed one by one, and each task waits for the previous one to finish before moving on.
Asynchronous programming: Tasks can start and run independently, without waiting for others to finish. The program keeps working on other tasks while waiting for the first one to complete.

Event - events are the actions that happens during the execution of the program.
	- eg when user clicks on button a file will be uploaded any request coming to the server. this action are events.
	 - 	
event emmiter - create or emits the event.
event que - container for emitted events.
event handler - function that respond to the events
event loop - monitors the event que , executes these events in order they were added.

npm - stands for node package manager 	
	- helps to manage libraries or packages of the application.
	- allows us to easily install or uninstall , update the dependencies.

node_modules - it is foilkder where all the libraries and packages installed via npm are stored.
	- contains all the dependencies of the project need to run.

package.json - contains meta data about the project.
		- manages dependencies , scripts , version, auther and license. 


module - 	
	- module contains a spoecific functionality that can be reused easily within applicatrion
	- module helps to keep our code organised and reusable.
	- there are few buit in module eg fs- for file opeartion, http - for creariung servers , path - for handling path.

function - a block of code performs a specific task. it can be called and executed whenever needed.

ways to export module - 
1. module.export.sayHello = sayHello
2. export.sayHello(){}

mostly used common node modules.
1. http - used for creating http server , handle http request and response

const http = requre('http')
const server = http.createServer((req,res)=>{
res.write("Hello")
res.end();
});
server.listen(3000)

2. fs - provides functionality to interact with the file system
const fs = require('fs')
fs.readFile("example.txt",'utf8', (err, data) => {
if(err) throw err
console.log(data)
}

3.path - helps with the path and 
4. os - 
5. events

Middleware - middleware are like a middle middleman in the expree
		- can execute any logic
		- send the request to the next middleware
		- can end req , res cycle
		- check for authentication or autherisation
		- can update the req or respose object.

types of middleware - 1.Built in middlware - express.static
			2. third party middleware - installed from third party eg body-parser, cors
			3. custom middleware - we can create our custom middleware	



























DNS - Domain name System.
- when we type any website into browser , DNS helps to find the IP address of the website so can our computer connect to it.

HTTP -
HyperText transfer protocall - 
protocall used for transfering data on the web.
Example:
When you type http://example.com, your browser sends an HTTP request to g et the website content.

HTTPS - 
HyperText transfer protocall secure
does the same job of transfering the data on the web but securily.
here the data is encrypted, so no one can chnage or see while travelling over the internet.
useful for banking, logging, and secure websites.

TCP - Transmission control protocal
low level protocall works underneath HTTP and HTTPs .
it handles how data is sent over the web
breakes the data into small packets 
send them acroos internet
make sure they sent correctly



Headers - header is a filed of a HTTp rquest or respond that holds extra informtiomn or metadata about rrq or response.
built in common 
request headrs - 
1. host name,
2. rerquest type,
3. userinfo

response headers -
1.content type ,
2.content length,
3.cookies 

can set our custom headers  
1. using fetch 
fetch('https://api.example.com/data', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer token123'
  }
});

2. using axios 
const axios = require('axios');
axios.get('https://api.example.com/data', {
  headers: {
    'Authorization': 'Bearer token123',
    'Accept': 'application/json'
  }
});

Stream - Contineous flow of the data. allows us to handle the data chynks by chunks instaed all at once.
they are very useful for dealing with large size files, videos and data.

advantage - effiecient memry uses , fatser performamnce 

types of streams - 
1. readable - data can be read from it
2. writable - data can be write to it.
3.Duplex - we can read and wrie data
4. Transform - modifies data.



Express Js :
	-Framework for Node.js.
	- Provides features for building single-page, multi-page web application.
	- 


MongoDB :
	- nosql database
	- stores data in flexible , json like structure like documents.
	- makes quering easy and fast.

















MVc - Model View controller
	- it ia a software architectural pattern for developing user interfaces.
Model - managaes data and business logic.
View - handles the display and presentation of the data to user.
Controller - process the user input. interacts with the model and updates the view.
